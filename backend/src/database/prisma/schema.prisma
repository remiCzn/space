generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model file {
  id     Int     @default(autoincrement())
  name   String  @db.VarChar(255)
  path   String  @db.VarChar(255)
  userId Int
  user   user    @relation("owner", fields: [userId], references: [id], map: "owner_user")
  avatar avatar?

  @@id([id, userId])
}

model folder {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  userId    Int
  parentId  Int?
  parent    folder?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "parent_folder")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "folder_owner")
  childrens folder[] @relation("parent")

  @@index([parentId], map: "parent")
  @@index([userId], map: "user")
}

model task {
  id     Int    @id @default(autoincrement())
  userId Int
  title  String @db.VarChar(255)
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "task_owner")

  @@index([userId], map: "user")
}

model user {
  id       Int      @id @default(autoincrement())
  email    String   @db.VarChar(255)
  password String   @db.VarChar(255)
  username String   @db.VarChar(255)
  folder   folder[]
  task     task[]
  file     file[]   @relation("owner")
  avatar   avatar?
}

model avatar {
  userId Int  @id
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileId Int  @unique
  file   file @relation(fields: [fileId], references: [id])
}

enum Role {
  ADMIN
  USER
}
